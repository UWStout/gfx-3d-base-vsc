/* globals __DEV__ */

// Import jQuery as the usual '$' variable
import $ from 'jquery'

// Import bootstrap's contents for webpack (not used below)
// These lines simply ensure that bootstrap is placed in the bundle files
// that are generated by webpack so we don't have to link them separately
import 'bootstrap'
import 'bootstrap/dist/css/bootstrap.min.css'

// Import the three.js library's WebGL Detector
// @ts-ignore
import WebGL from 'three/examples/js/WebGL'

// Import the stats object for FPS feedback
import Stats from 'stats.js'

// Import helpers
import MeshWidget from './helpers/MeshWidget'
import Interface from './interface'
import MeshFactory from './objects/MeshFactory'

let widget = null
let stats = null // Stats.js object for fps display

// To run once after the DOM is fully loaded
$(document).ready(() => {
  // Put all the event listeners in place
  Interface.initialize()

  // Make sure WebGL is supported
  if (!WebGL.isWebGLAvailable()) {
    console.log('adding message')
    let warning = WebGL.getWebGLErrorMessage()
    $('#GLWidget')[0].append(warning)
    return
  }

  // Initialize the widget
  widget = new MeshWidget($('#GLWidget')[0], MeshWidget.ControlTypes.DYNAMIC_ORBIT)

  // Widget should resize any time window resizes
  window.addEventListener('resize', () => {
    widget.requestResize()
  }, false)

  // Pass references to widget to other classes
  Interface.widget = widget
  MeshFactory.widget = widget

  // Optionally setup stats.js
  if (__DEV__) {
    stats = new Stats()
    stats.showPanel(0)
    document.body.appendChild(stats.dom)
  }

  // Start the animation loop
  animate()
})

// Basic update/animate function (MeshWidget.render does all the work)
function animate () {
  if (stats) { stats.begin() }
  widget.render()
  if (stats) { stats.end() }
  requestAnimationFrame(animate)
}
